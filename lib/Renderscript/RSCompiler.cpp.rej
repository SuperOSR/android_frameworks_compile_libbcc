--- lib/Renderscript/RSCompiler.cpp
+++ lib/Renderscript/RSCompiler.cpp
@@ -16,6 +16,7 @@
 
 #include "bcc/Renderscript/RSCompiler.h"
 
+#include <llvm/ADT/Triple.h>
 #include <llvm/Module.h>
 #include <llvm/PassManager.h>
 #include <llvm/Transforms/IPO.h>
@@ -29,7 +30,9 @@
 
 using namespace bcc;
 
-bool RSCompiler::beforeAddLTOPasses(Script &pScript, llvm::PassManager &pPM) {
+bool RSCompiler::beforeAddLTOPasses(Script &pScript,
+                                    llvm::PassManager &pPM,
+                                    const char *mTriple) {
   // Add a pass to internalize the symbols that don't need to have global
   // visibility.
   RSScript &script = static_cast<RSScript &>(pScript);
@@ -94,7 +103,8 @@
 }
 
 bool RSCompiler::beforeExecuteLTOPasses(Script &pScript,
-                                        llvm::PassManager &pPM) {
+                                        llvm::PassManager &pPM,
+                                        const char *mTriple) {
   // Execute a pass to expand foreach-able functions
   llvm::PassManager rs_passes;
 
@@ -109,9 +119,11 @@
     return false;
   }
 
-  // Expand ForEach on CPU path to reduce launch overhead.
-  rs_passes.add(createRSForEachExpandPass(info->getExportForeachFuncs(),
-                                          /* pEnableStepOpt */ true));
+  // Expand ForEach on CPU path to reduce launch overhead
+  // (if not compiling for PVR).
+  if (strncmp(mTriple, llvm::Triple::getArchTypeName(llvm::Triple::usc), 3))
+    rs_passes.add(createRSForEachExpandPass(info->getExportForeachFuncs(),
+                                            /* pEnableStepOpt */ true));
 
   // Execute the pass.
   rs_passes.run(module);
